apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  labels:
    app: kafka-2
  name: kafka-2
  namespace: {{ required "Missing value NAMESPACE" .Values.NAMESPACE }}
spec:
  replicas: 1
  serviceName: kafka-2
  selector:
    matchLabels:
      app: kafka-2
  template:
    metadata:
      labels:
        app: kafka-2
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - env:
          - name: KAFKA_BROKER_ID
            value: "2"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zookeeper-1:2181"
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "PLAINTEXT://kafka-2:9092"
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: "PLAINTEXT"
          - name: KAFKA_LOG4J_ROOT_LOGLEVEL
            value: "WARN"
          - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            value: { { required "Missing value KAFKA_OFFSET_TOPIC_REPLICATION_FACTOR" .Values.KAFKA_OFFSET_TOPIC_REPLICATION_FACTOR | quote } }

          name: kafka-2
          image: {{ required "Missing value KAFKA_IMAGE_NAME" .Values.KAFKA_IMAGE_NAME }}
          imagePullPolicy: Always
          ports:
            - containerPort: 9092
          resources:
            requests:
              memory: {{ required "Missing value KAFKA_MEMORY" .Values.KAFKA_MEMORY | quote }}
          volumeMounts:
            - mountPath: "/var/lib/kafka"
              name: kafka-2-claim0

      restartPolicy: Always
      volumes:
        - name: kafka-2-claim0
          persistentVolumeClaim:
            claimName: kafka-2-claim0
status:
  replicas: 1
